(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{604:function(s,a,t){"use strict";t.r(a);var n=t(12),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"javascript-max"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-max"}},[s._v("#")]),s._v(" JavaScript[max]")]),s._v(" "),t("h2",{attrs:{id:"正则表达式用于"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式用于"}},[s._v("#")]),s._v(" 正则表达式用于")]),s._v(" "),t("p",[s._v("概述  正则表达式 专门描述字符串中字符串出现规则的表达式")]),s._v(" "),t("p",[s._v("正则表达式用于:")]),s._v(" "),t("ol",[t("li",[s._v("验证字符串格式")]),s._v(" "),t("li",[s._v("查找敏感词")])]),s._v(" "),t("h2",{attrs:{id:"定义正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义正则表达式"}},[s._v("#")]),s._v(" 定义正则表达式")]),s._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"使用字符集简写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用字符集简写"}},[s._v("#")]),s._v(" 使用字符集简写")]),s._v(" "),t("ul",[t("li",[s._v("多选一规则匹配\n[备选方案]\n[卧我]\n[0-9] 区间内选一")])])]),s._v(" "),t("li",[t("h2",{attrs:{id:"其他简写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他简写"}},[s._v("#")]),s._v(" 其他简写")]),s._v(" "),t("ol",[t("li",[s._v("匹配一位小写音文字母 [a-z] 共26个")]),s._v(" "),t("li",[s._v("匹配一位大写音文字母 [A-Z] 共26个")]),s._v(" "),t("li",[s._v("要匹配一位字母 [A-Za-z] 共52个")]),s._v(" "),t("li",[s._v("要匹配一位字母或数字 [0-9A-Za-z] 共62个")]),s._v(" "),t("li",[s._v("要匹配一位汉字 [\\u4e00-\\u9fa5] 19968~40869 共20902个")])]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("      例子"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      利用字符集简写定义车牌号规则\n      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 第一位  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("位汉字\n      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 第二位  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("位大写字母\n      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 第三位   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v(" 后五位  每一位 都是一位大写字母或数字 \n  \n      答案"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\\u4e00"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("\\u9fa5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("A"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("A"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("A"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("A"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("A"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])]),s._v(" "),t("li",[t("h3",{attrs:{id:"预定义字符集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预定义字符集"}},[s._v("#")]),s._v(" 预定义字符集")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 要匹配一位数字"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \\d 等效于"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 要匹配一位字母"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("数字或"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\\w 等效于 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("A"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Za"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 要匹配一位空字符 \\s 可匹配 空格"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("制表符Tab 等 空白\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("要匹配所有")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("通配符"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])])]),s._v(" "),t("p",[s._v("手机号规则可进一步简写:\n1[3-8]\\d\\d\\d\\d\\d\\d\\d\\d\\d")]),s._v(" "),t("ul",[t("li",[t("h1",{attrs:{id:"数量词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数量词"}},[s._v("#")]),s._v(" 数量词")]),s._v(" "),t("ul",[t("li",[s._v("手机号实例   \\d{9} 等同于 \\d * 9 次\n例 : [3-9]\\d{9}")]),s._v(" "),t("li",[s._v("车牌号简写\n例 : [\\u4e00-\\u9fa5][A-Z].[A-Z0-9]{5}")])])]),s._v(" "),t("li",[t("h3",{attrs:{id:"数量词-包含两大类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数量词-包含两大类"}},[s._v("#")]),s._v(" 数量词 包含两大类")]),s._v(" "),t("ol",[t("li",[s._v("有明确数量边界的数量词")])]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 字符集"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" 表示字符集必须重复n次 不能多也不能少\n      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 字符集"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" 表示字符集至少重复n次 最多重复 m 次\n        比如： \\d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 字符集"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("表示字符集匹配内容至少 重复n 次 多了不限\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("没有明确数量边界的数量词")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" \\"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" 可有可无 多了不限\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" ？ 可有可无 最多一次\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" \\"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("  至少一次 多了不限\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" \\s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("   \\s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("  \\s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])])])])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("例子:\n匹配手机短信中验证码  连续4为 到 6位的手机号")]),s._v(" "),t("p",[s._v("正则表达式 大部分情况采用 贪婪模式进行匹配\n尽量匹配最长的关键词")])])]),s._v(" "),t("ul",[t("li",[t("h2",{attrs:{id:"选择和分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择和分组"}},[s._v("#")]),s._v(" 选择和分组")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("选择 指多个子规则选择其一进行匹配")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v(" 子选择"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 子选择"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1.  分组 多个子规则分为一组 再和分组外的规则匹配\n\n​```JS\n其他规则(多个子规则)\n\n例: ([我卧]|wo)\\s*([草艹槽]|cao)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("定义完整手机号规则")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v(" - +86 或 0086\n - (\\+86|0086)\n - 至少一个空字符:\\s+ \n - 之前所有可有可无 至少一次()?\n - 1 \n")])])]),t("ul",[t("li",[s._v("3~8 任选其一\n"),t("ul",[t("li",[s._v("0-8\n\\+ 转义字符\n答案: ((+86|0086)\\s+)?1[3-8]/d{9}")])])])])]),s._v(" "),t("li",[t("p",[s._v("定义完整身份证号规则")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v(" - 15位数字 \\d{15}\n - 2位数字 \\d\\d\n - 最后一位:  1位数字 或 X[0-9x]\n - 最后三位 可有可无 虽多一次\n\n 定义完整身份证正则\n \\d{15}(\\d\\d[0-9x])?\n")])])])])])])]),s._v(" "),t("p",[s._v('作业需求:  匹配 "微信","weixin","w x" 等情况 并防止 中间加空格')]),s._v(" "),t("ul",[t("li",[t("h2",{attrs:{id:"指定匹配位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定匹配位置"}},[s._v("#")]),s._v(" 指定匹配位置")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("使用情况  如果只希望匹配特殊位置上的关键词时 就可以使用特殊符号 表示特殊位置")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" 表示字符串开头  \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" $ 表示字符串结尾\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" \\b 表示单词边界"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("可匹配"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 空格 标点符号 字符串开头和结尾等 可将一个单词与其他单词分割开的符号\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])]),s._v(" "),t("p",[s._v("找到开头和结尾空格")]),s._v(" "),t("p",[s._v("例如 ^\\s+$ //错误写法")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("      正确写法     \n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\\s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\\s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("$\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("常见面试题")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 找到每个单词的首字母\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" ———— 前边紧挨着的单词边界字母\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\\b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Za"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])])])]),s._v(" "),t("p",[s._v("作业需求")]),s._v(" "),t("p",[s._v("使用正则匹配电子邮件: ___ 记住")]),s._v(" "),t("ul",[t("li",[t("h2",{attrs:{id:"string-的正则函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-的正则函数"}},[s._v("#")]),s._v(" String 的正则函数")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("查找敏感词  4种情况")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("1 查找一个固定的敏感词位置 i;")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("indexOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"敏感词"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fromi"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在str中 从 fromi 开始 向后查找下一个“敏感词”的下标位置 i")]),s._v(" "),t("p",[s._v("找到 返回敏感词第一个字的下标位置\n没找到返回 -1")]),s._v(" "),t("p",[s._v("问题: indexOf 只能查找固定的敏感词 而且不支持正则！")])]),s._v(" "),t("li",[t("p",[s._v("2  用正则表达式 模糊查找多种敏感词")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("search")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("正则")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("i")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("  i 不区分大小写\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 原理和用法几乎相同\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("差别\n- 1 用灵活的正则表达式 代替了写死的敏感词\n- 2 只有一个参数 不能指定开始的位置 永远只能从头开始找")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])])]),s._v(" "),t("li",[t("h2",{attrs:{id:"扩展-test"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展-test"}},[s._v("#")]),s._v(" 扩展 .test()")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("test() 方法是正则表达式的一个方法，用于检测一个字符串是否匹配某个模式")])]),s._v(" "),t("li",[t("p",[s._v("如果是则返回 true，否则就返回 false")])]),s._v(" "),t("li",[t("p",[s._v("regexp.test(str)")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("手机号验证："),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("^[1][3,4,5,7,8][0-9]{9}$")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("phone"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"string-正则函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-正则函数"}},[s._v("#")]),s._v(" String 正则函数")]),s._v(" "),t("h2",{attrs:{id:"查找敏感词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找敏感词"}},[s._v("#")]),s._v(" 查找敏感词")]),s._v(" "),t("p",[s._v("4种")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("固定敏感词出现的位置")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('   ````JS\n     var i = str.indexOf("敏感词",fromi);\n   ````\n')])])])])]),s._v(" "),t("p",[s._v("没有给定值 从0开始找\n没找到返回-1\n问题： 如果换成同音字或拼音,就找不到了")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("用正则表达式模糊查找一个敏感词的位置")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("search")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("正则表达式")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("i")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("问题：只能返回敏感词的位置 不能返回敏感词具体的内容")])]),s._v(" "),t("li",[t("p",[s._v("获取敏感词内容 2种")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("正则")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("i")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v(' - 在str中 查找一个符合正则要求的敏感词的内容和位置\n\n - 返回值 返回一个数组 \n\n - 没找到 返回null \n\n - 如果想获得本次查找的内容 arr[0]  \n\n - 如果想获得本次查找的位置  arr\n\n   `````JS\n   ["index"] 必须添加 ""\n   `````\n\n 正则表达式只能匹配一个敏感词 -g 找出所有\n')])])]),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ig);")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("问题"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("  如果match"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("g 只能返回敏感词内容 无法返回敏感词位置 \n如果只关心 敏感词内容  就使用 match"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("g \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])])]),s._v(" "),t("h2",{attrs:{id:"强调"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强调"}},[s._v("#")]),s._v(" 强调")]),s._v(" "),t("ul",[t("li",[t("h4",{attrs:{id:"如果一个函数有可能返回null-则使用前必须先验证-是不是null-才能使用-因为null之后-什么都不可以加-null-报错-null-报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如果一个函数有可能返回null-则使用前必须先验证-是不是null-才能使用-因为null之后-什么都不可以加-null-报错-null-报错"}},[s._v("#")]),s._v(" 如果一个函数有可能返回null! 则使用前必须先验证 是不是null 才能使用  因为null之后 什么都不可以加 null 报错 null. 报错")])]),s._v(" "),t("li",[t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("$"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])]),s._v(" "),t("h1",{attrs:{id:"js-底层数组都是关联数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-底层数组都是关联数组"}},[s._v("#")]),s._v(' Js 底层数组都是关联数组  "" : ""')]),s._v(" "),t("h3",{attrs:{id:"arr-length-arr-length-数字下标不能简写-与小数点冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arr-length-arr-length-数字下标不能简写-与小数点冲突"}},[s._v("#")]),s._v(' arr.length arr["length"]  数字下标不能简写!  与小数点冲突')]),s._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[t("p",[s._v("既查找每个关键词的内容 又查找关键词的位置")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("   - RegExp对象 exec() 函数\n")])])])])]),s._v(" "),t("h1",{attrs:{id:"替换敏感词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#替换敏感词"}},[s._v("#")]),s._v(" 替换敏感词")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("简单替换 将所有敏感词替换统一新词")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('````JS\n  str = str.replace(/正则/ig,"新词")\n````\n\n   坑： 替换后 不报错也替换不成功\n    \n   因为 字符串都是不可变类型 ！\n        无法对原字符串直接进行修改\n        所有字符串函数 都只能返回修改后的字符串 而保持原字符串不变\n   解决 想要获得新值 必须用=接住新值保存到变量中\n')])])])]),s._v(" "),t("li",[t("p",[s._v("高级替换 根据每次找到的敏感词不同 动态选择不同的新词替换！")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v(" //replace 会自动在每个找到的关键词上调用一次这个\n\n//回调函数 找到几个词 就反复调用几次 每次调用时 会\n\n//自动将本次找到的关键词传给函数keyword\n")])])])])]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("个要求\n                \n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("keyword")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 必须有一个参数接住本次找到的一个关键词\n      \n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 必须返回处理后的新词\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" keyword"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toLocaleUpperCase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n          \n所有形参可自己定义参数名\n补 回调函数 callback 我们自己定义的 但不是我们自己调用去执行 而是交给其他对象去执行\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v('衍生：删除敏感词 其实就是将敏感词替换为""')]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("trim")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("str")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("^\\s+|\\s+$")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("切割敏感词")])]),s._v(" "),t("p",[s._v("什么是 根据指定的切割符 切割成多段字符串")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("种"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 简单切割  切割符是固定的\n       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("split")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"切割符"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" 将字符串 str \n    \n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 复杂切割 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 切割符是变化的 但是有规律的。 \n    \n       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("split")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("正则")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \n       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 例如按照空格进行分割\n    \n     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 衍深操作：打撒字符串为字符数组\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("ul",[t("li",[s._v("总结：\n"),t("ul",[t("li",[t("p",[s._v("查找敏感词")]),s._v(" "),t("ul",[t("li",[t("ol",[t("li",[t("p",[s._v("查找一个固定的敏感词")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("indexOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"敏感词"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fromi"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])])]),s._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("使用正则模糊查找一个敏感词位置")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code")]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"})])])]),s._v("\nstr.search(/正则/i)"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"})])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("ol",{attrs:{start:"3"}},[t("li",[s._v("用正则查找一个敏感词的内容")])])]),s._v(" "),t("li",[t("ol",[t("li",[t("p",[s._v("只查找一个敏感词的位置 和内容")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("      ```JS\n      var arr = str.match(/正则/i)\n      ```\n")])])])])])]),s._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("查找全部敏感词内容 但无法获取位置")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ig);")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[t("ol",{attrs:{start:"4"}},[t("li",[s._v("既查找每个敏感词内容 又查找每个敏感词的位置")])])])])])])])])])]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 替换敏感词\n      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 删除\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 切割\n      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 打撒字符串为字符数组\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"regexp对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp对象"}},[s._v("#")]),s._v(" RegExp对象:")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("专门保存一条正则表达式 并提供正则执行查找和验证方法的对象\n何时:")]),s._v(" "),t("ol",[t("li",[s._v("验证时")]),s._v(" "),t("li",[s._v("高级查找时\n如何:")]),s._v(" "),t("li",[s._v("创建对象:2种\n"),t("ol",[t("li",[t("p",[s._v("简化版创建")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\\b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("ig"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])])])]),s._v(" "),t("p",[s._v("何时 如果正则表达式固定不变的w\n问题 不支持动态生成正则表达式\n因为://之间是正则表达式的地盘 js不认识")])])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('2. 用new创建\n  \n    ```JS\n  var reg = RegExp("\\b[a-z]","ig");\n         ```\n\n     何时  如果正则表达式需要根据变量数组内容 动态生成！\n         \n         因为：这种方法用js认识的""代替了// 而在js中 有很多办法 灵活的拼接想要的字符串 \n')])])]),t("p",[s._v("​"),t("br"),s._v("\n​"),t("br"),s._v("\n2. RegExp\n1. 验证格式")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("        ````JS\n        var bool = reg.test(str);\n        ````\n  \n    用reg规则 检测str 是否符合规则要求 \n    返回值：true/false\n  \n    坑: test 默认只要在str 中找到部分 和 reg 匹配的 就返回true ！ 而不要求 从头到尾匹配\n")])])]),t("p",[s._v("​"),t("br"),s._v("\n## 解决：凡是验证 都要求从头到尾必须完整匹配")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("        前加 ^ 结尾加 $ \n  \n  意味从头到尾\n")])])]),t("p",[s._v("​"),t("br"),s._v("\n只要使用test 必须使用 前后+^$")]),s._v(" "),t("h1",{attrs:{id:"regexp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp"}},[s._v("#")]),s._v(" RegExp :")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("验正字符串格式 bool= reg.test();")])]),s._v(" "),t("li",[t("p",[s._v("既查找内容 有查找关键词的位置")]),s._v(" "),t("p",[s._v("var arr = reg.exec(str);")])])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v(" 在str 中查找下一个关键词的位置和内容\n      \n  返回值 和match 不加 g 的时候是相同的\n        直到到 arr[0:关键词的内容,index: 位置]\n        如果没有找到返回null\n")])])]),t("h1",{attrs:{id:"function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[s._v("#")]),s._v(" Function")]),s._v(" "),t("h2",{attrs:{id:"什么是"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是"}},[s._v("#")]),s._v(" 什么是：")]),s._v(" "),t("p",[s._v("用途 保存一段可重用的代码段的程序结构 再起一个名字")]),s._v(" "),t("p",[s._v("本质 内存中保存一段代码段的存储空间--")]),s._v(" "),t("h2",{attrs:{id:"为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么"}},[s._v("#")]),s._v(" 为什么：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("代码重用\n何时 只要一段代码 可能被反复使用 都要定义在一个函数内 再起个名字 今后 用函数名等于用代码段\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如何")]),s._v(" "),t("p",[s._v("创建函数 3种")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("函数名")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("形参列表")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    函数体\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" 返回值\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("形参是什么")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("          专门接受 从函数外部传入函数内部数据的变量\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("为什么")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("          有些函数执行时  需要动态获得必须的数据 才能正常执行\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("何时")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("          只要一个函数 必须某些数据 才能正确执行\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("返回值")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("      什么是  一个函数的执行结果\n      \n      为什么 外部调用者可能需要获得函数执行结果\n      \n      何时   只要外部调用者 需要获的函数的执行结果\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("笔试问题")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("问题  会被声明提前\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("什么是")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  在程序执行前！程序会先将所有"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 声明的变量和"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("声明的函数 提前到当前作用域的顶部集中创建 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("而")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("赋值"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("留在原地\n  所以声明提前是js广受诟病的缺陷\n  打乱了程序正常执行的顺序\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("new 来创建")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" fun "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"形参1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"形参2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("赋值方式创建：")])])]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("函数名")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("形参列表")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    函数体\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("说明: 赋值方式创建的函数 和声明方式 创建的函数在使用时 都一样\n只不过 在程序开始执行前 赋值方式可避免函数被声明提前 保持了程序原有的执行顺序")]),s._v(" "),t("p",[s._v("揭示: js中其实函数也是一个普通的对象而已,函数名仅仅是一个普通的变量 函数名变量通过对象地址引用着函数对象,每次调用函数名时 通过地址 找到函数对象 再执行其中内容")]),s._v(" "),t("p",[s._v("变量 : 内存中存储一个数据的存储空间 在起一个名字")]),s._v(" "),t("p",[s._v("强调 如果一个函数 只是定义 没有调用 该函数体是不会执行")]),s._v(" "),t("p",[s._v('global["a"];  底层  关联数组')]),s._v(" "),t("h2",{attrs:{id:"重载-overload"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载-overload"}},[s._v("#")]),s._v(" 重载(overload)")]),s._v(" "),t("h3",{attrs:{id:"什么是-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-2"}},[s._v("#")]),s._v(" 什么是:")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  多个同名函数 不同形参列表 在调用时根据传入实参列表的不同 动态选择函数执行 \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"为什么-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-2"}},[s._v("#")]),s._v(" 为什么")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  减少函数个数 减轻调用者的负担\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"何时"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时"}},[s._v("#")]),s._v(" 何时")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  只要一件事 可能根据传入参数的不同  执行不同的逻辑 都要使用重载！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"如何"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何"}},[s._v("#")]),s._v(" 如何:")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  问题Js不支持标准的重载写法 因为js不允许多个同名函数的存在！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决"}},[s._v("#")]),s._v(" 解决:")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    js中借助于arguments 对象实现重载\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"什么是-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-3"}},[s._v("#")]),s._v(" 什么是:")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("每个函数内自带的 专门接收所有传入函数的实参值列表的数组对象。\n\n函数内自带对象 不用创建可直接拿来使用 接收所有传入函数的实参值 即使没有定义形参变量 或形参变量个数少于传入实参值个数 都没关系\n\narguments 可接住所有传入函数的实参值 这就是为什么js 中的函数 定义了几个形参和调用了几个实参 毫无关系\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h2",{attrs:{id:"类数组对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类数组对象"}},[s._v("#")]),s._v(" 类数组对象:")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("长得像数组的对象\n像数组 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 小标 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" length\n不是数组 是对象 不是数组家孩子\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"何时-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-2"}},[s._v("#")]),s._v(" 何时:")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  只要js中接收不确定个数的参数值 都用arguments"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"如何-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-2"}},[s._v("#")]),s._v(" 如何:")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 无论传入多少个参数 都只定义一个函数 \n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 在函数内直接访问 arguments 根据 arguments 不同 动态选择不同的逻辑执行任务。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如果只是部分参数不确定 而且参数赋值给参数时 又要求对应关系怎么办？")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cook")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"面"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("答: 以上传参方式 会报语法错误！因为实参列表不允许出现空值")]),s._v(" "),t("h3",{attrs:{id:"当遇到多个参数不确定有没有-又要要求对应关系时-只能使用对象语法解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当遇到多个参数不确定有没有-又要要求对应关系时-只能使用对象语法解决"}},[s._v("#")]),s._v(" 当遇到多个参数不确定有没有 又要要求对应关系时 只能使用对象语法解决")]),s._v(" "),t("p",[s._v("1 定义函数时:")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("函数")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("形参列表变量")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先判断 obj 对象包含那些属性 不包含那些属性 缺少的属性用默认值代替")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数执行过程中 都从对象里,取实参值使用！")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n\n但是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 我们规定 在将来调用时 实参值都要放在一个对象中传入\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("2  调用函数时:")]),s._v(" "),t("div",{staticClass:"language-JS line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("函数名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("属性"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("实参值"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("属性"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("实参值"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"优点-任意参数都可以缺少-都不会报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点-任意参数都可以缺少-都不会报错"}},[s._v("#")]),s._v(" 优点: 任意参数都可以缺少 都不会报错")]),s._v(" "),t("p",[s._v("任意参数求和")]),s._v(" "),t("h2",{attrs:{id:"匿名函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数"}},[s._v("#")]),s._v(" 匿名函数")]),s._v(" "),t("h2",{attrs:{id:"什么是-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-4"}},[s._v("#")]),s._v(" 什么是：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    定义函数时 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("不被任何变量所引用的函数")]),s._v("  \n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"为什么-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-3"}},[s._v("#")]),s._v(" 为什么：")]),s._v(" "),t("h3",{attrs:{id:"_1-为了节约内存-2-划分临时作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-为了节约内存-2-划分临时作用域"}},[s._v("#")]),s._v(" 1 为了节约内存 2 划分临时作用域！")]),s._v(" "),t("p",[s._v("何时：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 如果一个函数只执行一次 \n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 划分临时作用域！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如何:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 回调函数"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 今后大多为匿名函数\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 匿名函数自调\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 为什么  全局变量 极易被污染！ 今后禁止使用全局变量 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("匿名函数自调 定义函数后 立即调用函数 调用后立即释放！")]),s._v(" "),t("p",[s._v("问题 全局变量极易被污染！又不会自动释放 所以 今后禁止使用全局变量")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("解决 今后js 代码 都要包裹在匿名函数自调用中 \n好处 绝对不会产生全局变量 节约内存又不影响功能执行\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h1",{attrs:{id:"作用域和作用域链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域和作用域链"}},[s._v("#")]),s._v(" 作用域和作用域链")]),s._v(" "),t("h2",{attrs:{id:"作用域-scope"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域-scope"}},[s._v("#")]),s._v(" 作用域(scope):")]),s._v(" "),t("h3",{attrs:{id:"什么是-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-5"}},[s._v("#")]),s._v(" 什么是")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("用途"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 作用域就是一个变量的可用范围\n本质：作用域是保存变量的一个对象\n为什么： 为了避免不同范围得变量互相干扰"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n包括 "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JS")]),s._v("中只包括"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("级作用域\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"全局作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域"}},[s._v("#")]),s._v(" 全局作用域：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("             1. 保存任何地方都可以访问到的变量区域\n                   量称为全局变量 \n             2. 全局变量优点 共用 可反复使用 \n                    浪费内存\n             3.  函数作用域\n                   ​                1. 保存在函数内才可以使用的变量区域\n                   ​                2. 函数作用域中保存的变量是局部变量 \n                   ​                3. 局部变量优点 仅函数内可用 不会污染全局且用完就释放  不占用内存 \n                   ​                4. 缺点 无法重用！\n")])])]),t("h2",{attrs:{id:"程序和函数的执行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#程序和函数的执行过程"}},[s._v("#")]),s._v(" 程序和函数的执行过程：")]),s._v(" "),t("ol",[t("li",[s._v("当程序执行时 先创建全局作用域对象window")])]),s._v(" "),t("p",[s._v("​\t在window中 先保存所有的全局变量 和全局 函数\n​")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("当定义函数时 每个函数其实都有一个好友列表 暂时包含两项 离自己最近的一项是暂时是空的  距离自己远一些的一项保存着指向window 对象的地址")])]),s._v(" "),t("li",[t("p",[s._v('"好友列表"作用是 将来调用函数时,万一缺变量,可按照好友列表的顺序 去朋友中寻找')])])]),s._v(" "),t("p",[s._v("当调用函数时 会临时创建这次调用函数的函数作用域对象 并在函数作用域对象中添加函数的局部变量 并将函数作用域对象的引用 假如函数的好友列表中最近的一项保存！说明函数和临时创建的函数作用域对象 关系最好！ 缺变量 先找临时创建的函数作用域对象  如果函数作用域对象没有 才被迫找window要")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("当函数调用后 临时创建的函数作用域对象被释放 函数作用域对象中的变量同时释放 —————— 这就是为什么局部变量不可重用 的原因！！！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"作用域链-scopes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域链-scopes"}},[s._v("#")]),s._v(" 作用域链(scopes)")]),s._v(" "),t("p",[s._v("什么是:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("一个函数可用的所有作用域对象的集合。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("普通函数的作用链 在调用时是两个成员")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 距离自己最近的是临时创建的函数作用域对象\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("  离自己稍微远一些的是全局作用域对象 window\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("一个函数的作用域链")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("  保存着这个函数可用的所有变量\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("  控制这变量的使用顺序\n\n先局部 后全局\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h1",{attrs:{id:"闭包-closure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包-closure"}},[s._v("#")]),s._v(" 闭包(closure)")]),s._v(" "),t("h2",{attrs:{id:"什么是闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包"}},[s._v("#")]),s._v(" 什么是闭包：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("用途"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n\n  既重用一个变量 有保护这个变量不被污染的一种编程方法\n\n本质"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n    \n    外层函数的作用域对象 被内层函数对象引用着 无法释放  这个外层函数的作用域就是闭包对象\n\n为什么"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n\n    全局变量和局部变量的优缺点\n    全局变量"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 优点 可重用 缺点 极易被污染！"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    局部变量：优点  不会被污染 缺点"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("不可重用！"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h3",{attrs:{id:"何时-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-3"}},[s._v("#")]),s._v(" 何时：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  今后 只要为一个函数保存一个专属的 可重用的 还不会被外部污染的变量\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"如何-4步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-4步"}},[s._v("#")]),s._v(" 如何：4步")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 外层函数包裹要保护的变量和内层函数\n           内层函数一定要使用了外层函数的局部变量\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 外层函数将内层函数抛到外部\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 调用者调用外层函数 获得返回的内层函数对象 保存在变量中。 并反复使用。\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v(" 外层定义一个变量接收"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("出的参数\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("闭包是如何形成的")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  外层函数作用域对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("被内层函数对象引用着无法释放\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("闭包的缺点")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 比普通函数占用更多内存\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 多占用父母函数作用域对象\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 闭包不会自动释放 可能造成内存泄漏\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("解决: 使用完闭包后 如果不在使用了 要手动释放闭包")]),s._v(" "),t("div",{staticClass:"language-jsx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-jsx"}},[t("code",[s._v("pay "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("定义一个取号机函数 getNum() 可反复输出一个递增的不重复的数字")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//试图用同名变量篡改序号为0")]),s._v("\nxxx"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3")]),s._v("\n\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fun")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("999")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("nAdd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" getN "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fun")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getN")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nAdd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getN")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//?")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("hr"),s._v(" "),t("h1",{attrs:{id:"面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[s._v("#")]),s._v(" 面向对象")]),s._v(" "),t("h2",{attrs:{id:"什么是对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是对象"}},[s._v("#")]),s._v(" 什么是对象:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("用途"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 对象是描述现实中一个具体事物的属性和功能的程序结构\n\n本质： 程序中集中存储一个事物的属性和功能的一块存储空间 再起一个名字\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"为什么-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-4"}},[s._v("#")]),s._v(" 为什么：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  便于大量数据的维护和使用\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"什么是面向对象编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是面向对象编程"}},[s._v("#")]),s._v(" 什么是面向对象编程：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  程序都是先将数据封装在对象中 然后再按需使用对象中的成员。 这样的编程方式 就是面向的对象编程\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"何时-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-4"}},[s._v("#")]),s._v(" 何时:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  今后所有程序都是用面向对象方式实现的\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"如何-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-3"}},[s._v("#")]),s._v(" 如何：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("面向对象三步"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("三大特点"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 封装 继承 多态\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h1",{attrs:{id:"封装-继承-多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装-继承-多态"}},[s._v("#")]),s._v(" 封装 继承 多态")]),s._v(" "),t("h2",{attrs:{id:"封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[s._v("#")]),s._v(" 封装：")]),s._v(" "),t("h3",{attrs:{id:"什么是-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-6"}},[s._v("#")]),s._v(" 什么是：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  创建一个对象 集中保存一个事物的属性和功能\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"何时-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-5"}},[s._v("#")]),s._v(" 何时：")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[s._v("  - 只要使用面向对象方式编程 都要先将数据和功能封装在对象中 然后再按需使用。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"如何3种"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何3种"}},[s._v("#")]),s._v(" 如何3种：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("用"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" 创建一个对象\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 对象名"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        属性名"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("值"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("方法")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h2",{attrs:{id:"如何访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何访问"}},[s._v("#")]),s._v(" 如何访问")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("对象名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("属性名\n对象名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("方法")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("   \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[s._v("#")]),s._v(" 问题：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  在对象自己的方法 直接使用属性名却无法访问到自己的属性 报错 属性名未定义\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[s._v("#")]),s._v(" 原因")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[s._v("  所有不带.的变量"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("默认只能在作用域链中(临时函数作用域和我window)查找。 但是对象中"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("又不是作用域 所以对象是不包含在作用域链中的 所以直接使用属性"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("无法找到藏在对象内的属性的。 不好的解决方法：在属性名前加对象. "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("勾引着引擎进入对象中查找属性。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"问题-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题-2"}},[s._v("#")]),s._v(" 问题：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("紧耦合 如果外部修改 内部被迫跟着修改\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"解决-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决-2"}},[s._v("#")]),s._v(" 解决:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("松耦合 外部改变 内部d代码不用改变 也能自动适应\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"this-属性名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#this-属性名"}},[s._v("#")]),s._v(" This.属性名")]),s._v(" "),t("h3",{attrs:{id:"什么是this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是this"}},[s._v("#")]),s._v(" 什么是this:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  在调用函数时 临时指向正在调用函数的"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("前对象的关键词\n\n  总结 只要是自己的方法 想访问自己的属性就使用"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#错误"}},[s._v("#")]),s._v(" 错误：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("函数定义在哪个对象中 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("就指向哪个对象 \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"正确"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正确"}},[s._v("#")]),s._v(" 正确：")]),s._v(" "),t("p",[s._v("this与函数定义在哪无关！只与函数调用这一瞬间.前对象有关")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("   用"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("创建："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("步\n            "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("   先创建空对象 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("  强行向空对象中添加新属性  \n                "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("  obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("属性 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 值\n                "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("  obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("方法")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            揭示： 所有js对象底层 都是关联数组。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"对象-vs-关联数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象-vs-关联数组"}},[s._v("#")]),s._v(" 对象 VS 关联数组")]),s._v(" "),t("h3",{attrs:{id:"相同-4-个"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相同-4-个"}},[s._v("#")]),s._v(" 相同 4 个")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 都可以用"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"成员名"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("或"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("成员名两种方式 访问自己的成员。 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("成员名 其实就是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"成员名"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 简写 也就是说 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("成员名 到底层会被自动翻译成"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"成员名"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n    坑 如果成员名来自于一个变量！ 则不能用"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('".变量"')]),s._v("方式访问成员。因为"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"变量"')]),s._v(" 会被翻译为"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"变量"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 出错了 因为变量不可以放在"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("里！\n    解决"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 今后只要成员名不是写死的，而是来自于一个变量 只能用"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("变量"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 不带引号的方式访问\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 都可以被"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("循环遍历每个成员\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("  随时可以给数组或对象在任何位置添加新成员"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("而不会报错！ 而自动创建该成员\n所以 如果想给一个已创建玩得对象 添加新属性 只有一个野蛮的办法 强行赋值！\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("  访问数组或对象中不存在的位置 不会报错 而是返回"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("！\n\n    不同 类型\n    关联数组"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 是数组家的孩子\n    对象 是object 孩子\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("问题:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  只能创建一个对象 如果反复创建 多个相同结构的对象时。\n  代码很冗余 不便于维护。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("解决:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("用构造函数：\n什么是： 专门描述一类对象统一结构的函数\n为什么"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("  为了重用对象的结构定义 \n何时： 只要程序中需要反复创建 同一类型的多个对象时。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[s._v("#")]),s._v(" 构造函数")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  如何"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("步\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 定义构造函数来描述一类对象同意结构\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("类型名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("形参"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("属性名 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 形参"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("属性名"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("形参"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("方法")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 调用构造函数按照统一结构创建对象  \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("类型名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("属性值"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" 的 原理："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("件事"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 新建一个空对象\n            "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" ？\n            "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 用"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("调用构造函数 将构造函数中的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" 都吸引到"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("上"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n              然后通过强行赋 \n      问题：构造函数虽然实现了代码重用"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("但是浪费了内存！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h2",{attrs:{id:"继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[s._v("#")]),s._v(" 继承")]),s._v(" "),t("h3",{attrs:{id:"什么是-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-7"}},[s._v("#")]),s._v(" 什么是:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v(" 爹的成员 孩子无需重复创建"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("可直接使用\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"为什么-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-5"}},[s._v("#")]),s._v(" 为什么:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v(" 代码重用"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 节约内存\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"何时-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-6"}},[s._v("#")]),s._v(" 何时：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    只要多个孩子都需要共用的成员"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("都通过继承使用！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"如何-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-4"}},[s._v("#")]),s._v(" 如何：")]),s._v(" "),t("p",[s._v("​      不用自己设置继承关系！其实js中已经帮我们设置好了继承关系  我们直接使用即可！")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" js实现继承"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 都是通过继承原型对象来实现的\n              \n\t\t原型对象：专门集中保存一类对象的共有成员的父对象。\n\n        原型对象是在定义构造函数时"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("附赠的。只不过暂时是空的\n        如何找到原型对象"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 每个构造函数都有一个prototype 指向自己附赠的这个原型对象\n        其实 原型对象中 也有一个constructor属性 指回构造函数\n\n子对象如何继承父对象"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n              \n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" 的 第"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("步：让子对象的__proto__属性指向妈妈的原型对象 凡是从__proto__属性值指出的关系"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("都叫继承关系。\n        \n        结果： 原型对象中的成员 子对象无需创建 可直接使用！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("如何向原型对象中添加共有成员:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("妈妈")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("成员名"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("值\n    比如 向所有学生的共同的爸爸 里强行添加一个公用的方法 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("intrSelf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("intrSelf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    结果： 凡是 Student 生的孩子 都能"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("inerSelf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("来直接调用爹的函数\n      比如  lilei"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("intrSelf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    妈妈叫爸爸 prototype\n    孩子叫爸爸  __proto__ \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("​")]),s._v(" "),t("h2",{attrs:{id:"自有属性-和-共有属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自有属性-和-共有属性"}},[s._v("#")]),s._v(" 自有属性 和 共有属性：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("       自有属性：保存在子对象中 归对象个人所以有的属性\n\n       共有属性：保存在原型对象中"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("归于多个子对象共有的属性\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("获取属性值： 二者没有任何差别  子对象.属性名")]),s._v(" "),t("p",[s._v("修改属性值:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("自有属性"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("可直接用子对象修改\n比如 lilei"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sage"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n共有属性"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("只能用原型对象修改\n如果强行用子对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("共有属性修改 \n会给这个子对象添加一个同名的自有属性。 从此这个子对象和父对象的属性无关了\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"内置对象的原型对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置对象的原型对象"}},[s._v("#")]),s._v(" 内置对象的原型对象:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("任何一种类型 其实都是由构造函数和原型对象组成。内置类型也是这样。\nJs包括的那些内置类型：\n        String Number Boolean\n        Array  Date  Math RegExp  Error  Function  Object \n        global  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("​")]),s._v(" "),t("h2",{attrs:{id:"所有内置类型也包含构造函数和原型对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#所有内置类型也包含构造函数和原型对象"}},[s._v("#")]),s._v(" 所有内置类型也包含构造函数和原型对象：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("构造函数"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 创建该类型的子对象\n原型对象：保存该类型的所有子对象共有的方法和属性\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("比如: Array 类型就包含2部分")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("数组类型构造函数")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        所以创建数组可以使用"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 数组类型也有一个原型对象 包含所有数组对象公用的函数"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        为一个类型添加一个共有的自定义函数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        何时"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 只要项目中 经常对一个类型的对象做一种操作 而这个类型的原型对象中又不包含这种函数。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("如何: 比如:为所有数组添加求和这种函数")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 在数组类型的原型对象中添加sum函数\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 用数组类型的子对象 调用这个sum\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"面向对象-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象-2"}},[s._v("#")]),s._v(" 面向对象")]),s._v(" "),t("h3",{attrs:{id:"继承-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承-2"}},[s._v("#")]),s._v(" 继承:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  原型链\n        \n    什么是"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 由多级父对象 逐级继承 形成链式结果\n        作用：\n         \n          "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 保存了一个对象可用的所有成员 \n             将来判断一个对象可以使用那些成员"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("就看它的原型链\n             上有什么成员\n            \n             如果一个成员在子对象的原型链的某个父级对象上 就可以"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("子对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("成员  访问\n            \n             如果一个成员不包含在子对象的原型链的任意一个对象上"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("就不能用 子对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("成员访问\n          \n          "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 控制着成员的使用顺序"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n              先自有 再共有！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h2",{attrs:{id:"多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[s._v("#")]),s._v(" 多态")]),s._v(" "),t("h3",{attrs:{id:"什么是-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-8"}},[s._v("#")]),s._v(" 什么是:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  一个函数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("在不同情况下表现出不同的状态\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"包括"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包括"}},[s._v("#")]),s._v(" 包括:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("  重载"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 根据传入参数的\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("  重写"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"什么是-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-9"}},[s._v("#")]),s._v(" 什么是:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v(" 在子对象中定义和父对象中成员完全相同的成员 来覆盖父对象的成员     \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"为什么-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-6"}},[s._v("#")]),s._v(" 为什么:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v(" 从爹继承来的成员不一定都是好用的！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"何时-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-7"}},[s._v("#")]),s._v(" 何时：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("只要子对象觉得从爹继承来的不好用就要重写！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"如何-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-5"}},[s._v("#")]),s._v(" 如何：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("只要在子对象中定义和父对象同名的成员\n​    \nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//输出对象的存储结构")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"自定义继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义继承"}},[s._v("#")]),s._v(" 自定义继承:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    何时"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 只要觉得现在的爹不好用！就可以用\n    如何"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        \n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 只更换一个对象的爹\n            \n            子对象__proto__"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("新爹\n            \n            问题"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("__proto__浏览器不推介使用\n            \n            解决"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPrototypeOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("代替__prpto__ \n            Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPrototypeOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("子元素"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("新爹"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" Prototype\n  \n  设置子元素  的 原型对象 为 新爹\n  Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPrototypeOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hmm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("father"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     \n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 同时多个对象的爹\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("构造函数")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("新老公\n            时机"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 在创建子对象之前换\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("h1",{attrs:{id:"es5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es5"}},[s._v("#")]),s._v(" ES5")]),s._v(" "),t("h2",{attrs:{id:"什么是-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-10"}},[s._v("#")]),s._v(" 什么是:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("EMAScript 标准的第五个升级版本\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"为什么-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-7"}},[s._v("#")]),s._v(" 为什么:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v(" 因为Js这门语言 又很多广受诟病的缺陷\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("包括哪些新的规则:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"use strict"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("严格模式:")]),s._v(" "),t("p",[s._v("什么是:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  比普通Js运行要求更严格的机制\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("为什么:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  因为Js这门语言 又很多广受诟病的缺陷\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("何时：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  今后所有Js程序都要在严格模式下！\n          \n          严格模式的新需求"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n          \n          "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 禁止给未声明变量赋值！\n                旧Js 强行给未声明的变量赋值 \n            结果"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 会自动在全局创建\n                  全局污染 内存泄漏\n          \n            严格Js中 强行给未声明的变量赋值\n            结果"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 报错"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("xxx is not "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n            避免内存泄漏和全局污染\n\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 静默失败升级为错误\n               静默失败"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("执行不成功 也不报错！\n                   极其不便调试\n             严格模式中"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("静默失败 也会报错！    便于调试\n         \n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 普通函数调用和匿名函数自调中的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("不再默认指向window 而是指向"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("\n         防止全局污染 内存泄漏  \n\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v(" 禁止使用 arguments"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("callee\n              \n            什么是 arguments"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("callee"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 是函数运行时"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 专门获得当前正在执行的函数本身。\n          \n            何时"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 递归！        \n              为什么"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("避免紧耦合 避免在函数内写死函数名。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("​"),t("br"),s._v("\n​")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    问题"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 递归效率极低！———— 重复计算量太大\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("​"),t("br"),s._v("\n​")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    所以 Es5 严格模式 出于性能考虑 禁用了 arguments"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("callee 就暗示不推介使用递归算法。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("​"),t("br"),s._v("\n​")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    解决：绝大多数的递归可以找循环代替\n\n    为什么"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("避免紧耦合 避免在函数内写死函数名。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("​"),t("br"),s._v("\n​")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    问题"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 递归效率极低！———— 重复计算量太大\n\n    所以 Es5 严格模式 出于性能考虑 禁用了 arguments"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("callee 就暗示不推介使用递归算法。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("​")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    解决：绝大多数的递归可以找循环代替\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"保护对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#保护对象"}},[s._v("#")]),s._v(" 保护对象:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    什么是"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        \n        控制对象的属性值或对象结构进行的随意篡改\n    \n    为什么"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n    \n        在旧的Js中 对象的属性和结构毫无自保能力。 任何人可在任何时候修改属性值为任何值 也可以随意添加属性和删除属性\n   \n     何时"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n     \n     \t需要控制对对象的访问时\n\n  如何："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("个层面"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("        \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("    ###  保护对象的属性\n")])])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES5")]),s._v("对对象的属性进行了重新分类\n        命名属性"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 可用"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("访问到属性\n            又分为"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n                数据属性 实际存储属性值的属性。\n       \n                访问器属性 不实际存储属性值"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("仅提供对另一个数据属性的保护。\n                \n        内部属性： 无法用"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("访问到内部的属性\n        \n        如何保护数据属性：\n            旧js中 数据属性其实就是一个普通的变量 毫无自保能力\n        \n            "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES5")]),s._v(" 标准中"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 每个数据属性都是一个缩微的小对象。 每个小对象中"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("保存一个属性和三个开关\n\n            如何修改属性的小开关来保护一个属性呢\n        \n            问题"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 不能用"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("直接修改属性对象内部的开关属性！\n\n      解决：必须用专用的函数解决\n    \n            Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("defineProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n                对象名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"属性名"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                  开关："),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("问题:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("writable和enumerable两个开关"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("任何人都可以随意开关。所以设置这两个起不到保护作用。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("解决:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("只要设置 writeble 和 enumerable\n都要同时关闭configurable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 目的是禁止修改前两个开关\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("解决:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("只要设置writable 和 enumerable 都要同时关闭configurable 目的是禁止修改两个开关。 \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"configurable一旦被改为fals-不可逆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configurable一旦被改为fals-不可逆"}},[s._v("#")]),s._v(" configurable一旦被改为fals 不可逆！")]),s._v(" "),t("p",[s._v("问题:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v(" enumerable 只能禁止"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" 遍历这个属性 无法阻止用"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("直接访问这个属性。———— 这是半隐藏 \n \n  解决： 无法解决\n  问题： Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("defineProperty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("一次只能修改对象中的一个属性。如果外部修改多个属性 就要重复写多遍\n  \n  解决"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n  Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("defineProperties")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n      对象名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        属性名"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          开关："),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n问题"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 使用保护属性 规则单调 无法使用自定规则保护属性\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("解决:使用访问器属性保护数据属性")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("什么是访问器属性 自己不保存数据"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("专门提供对其他数据属性的保护。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("何时：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("只要使用灵活的自定义规则保护数据时 就会要请保镖！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如何:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.")]),s._v(" 先将要保护的数据属性  隐形埋名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 并且半隐藏！！\n      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 为对象添加访问器属性"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("保护属性\n         \n          "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 访问器属性要冒名顶替使用原属性名\n          "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 访问器属性中包含"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v("两个属性值\n          \n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v(" 负责读取受保护的属性值\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" 中负责先验证再修改受保护的属性值\n          \n          访问器属性不再需要value和writable。 但是需要设置enumerable 和 configurable\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("访问器属性如何发挥作用:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("因为访问器属性是冒名顶替的所以"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("外人访问器属性时 和 访问普通属性是一样的\n\n只不过访问器属性执行时"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 会自动根据外人做到的操作"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("来选择"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v("和"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" 来调用 \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"保护对象-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#保护对象-2"}},[s._v("#")]),s._v(" 保护对象")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("保护对象的属性"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n保护对象的结构"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 个级别\n      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 禁止添加新属性"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n                Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("preventExtensions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      \n            阻止对obj对象添加任何扩展属性 \n            原理 每个对象都有一个隐藏的\n            \n            extensible的属性默认值为"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("preventExtensions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("使这个内部隐藏属性改为"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n      \n      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 密封：在兼具防扩展的基础上 进一步禁止删除现有属性\n          Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("seal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("​2 件事")]),s._v(" "),t("ol",[t("li",[s._v("禁止添加新属性")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("Object的extensible "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("禁止删除现有属性")]),s._v(" "),t("li",[s._v("有属性的configurable 都改为false！ 从此defineProperties中不需要再重复写 configirable:false!")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("其实今后 大多数对象都要密封！ \n强调： 虽然密封禁止修改结构 但是属性值随便改！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("冻结： 在兼具密封的基础上 进一步禁止删除现有属性 禁止修改属性值！")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("freesze")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("3 件事:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 禁止添加新属性 \n    \n\tobj的extensidle"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 禁止删除现有属性"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n    自动 将所有的属性的configurable都改为"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("！\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 自动将所有属性的writable都改为"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"object-create"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-create"}},[s._v("#")]),s._v(" Object.create()")]),s._v(" "),t("p",[s._v("函数:没有构造函数的情况下，也想到创建一个子对象    子对象继承的简单写法")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 件事"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("  \n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("创建一个新对象\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 继承一个父对象\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 为新对象添加自有属性\n\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 子对象 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("父对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// defineProperties")]),s._v("\n                属性名"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                  value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 属性值"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                  writable"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                  enumerable"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                  configurable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\t\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h2",{attrs:{id:"call-apply-bind-替换this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#call-apply-bind-替换this"}},[s._v("#")]),s._v(" call,apply,bind: 替换this")]),s._v(" "),t("h3",{attrs:{id:"何时-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-8"}},[s._v("#")]),s._v(" 何时:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  只要函数执行时 内部"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" 不是我们想要的\n  就可以使用这三个函数 将不想要的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("换成任意一个想要的对象。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"如何-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-6"}},[s._v("#")]),s._v(" 如何：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" call"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("apply"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 在一次调用函数时，临时替换一次"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("！\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("要调用的函数")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("替换"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("的对象，"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        强调"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 实参值列表必须从第二个值开始。\n        因为第一个实参的位置让给了替换"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("的对象！\n  原理"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n        call 更大的作用：可让任何对象去调用原本没有任何关系的一个函数。 —————— 抢\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"apply-vs-call"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apply-vs-call"}},[s._v("#")]),s._v(" apply vs call:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("apply 和 call 用法几乎完全一样。只不过"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("要求所有的实参值都要放在一个数组中整体传入。\n\n执行过程：\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 先用第一个参数值对象替换函数中的不想要的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("。\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 打散数组为多个单独的元素值，分别传给对应的每个形参变量\n\n总结：通常情况下 要替换函数中的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("用call就够了！ 只有实参值类表是放在一个数组中的时候才需要使用apply 先打散再传入函数。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h2",{attrs:{id:"bind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[s._v("#")]),s._v(" bind")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("bind"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 不调用函数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("而是基于函数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("创建一个新函数副本。并永久替换新函数中的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("为指定的对象。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"何时-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-9"}},[s._v("#")]),s._v(" 何时:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("今后"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("如果一个函数需要反复调用，又反复替换其中的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("时 都是用 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 来创建副本"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n并永久绑定"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"如何-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-7"}},[s._v("#")]),s._v(" 如何:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 新函数 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("旧函数")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    替换"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("的对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    要绑定的实参值"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("                                  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("结果:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 新函数的功能和就函数是完全一样的。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 但是新函数中的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("和开头部分形参"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("已被永久替换为固定的对象和固定的参数值。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 今后调用新函数时"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("只要传入可能变化的剩余几个实参值即可！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"数组函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组函数"}},[s._v("#")]),s._v(" 数组函数")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("数组中查找元素"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" indexOf \n  \n  数组中的indexOf 和字符串的 indexOf 完全一样\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("indexOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"元素"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fromi"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  在arr数组中 从 fromi位置开始 找下一个和指定"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"元素"')]),s._v("相同的元素所在的位置i\n      返回值"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("如果找到 返回 i\n              如果没有找到 返回"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判断"}},[s._v("#")]),s._v(" 判断:")]),s._v(" "),t("ol",[t("li",[s._v("判断数组中是否所有元素都符合要求")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" bool "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("every")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//value 当前元素值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// i 当前索引位置")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// arr 当前数组元素")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" 判断条件"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n          \n原理 every 会自动遍历arr中的每个元素。\n  \n每遍历一个元素"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("就会自动调用一次回调函数"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("。\n\n每次调用"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("时"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("自动传入当前正在遍历的元素值和下标位置"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("以及当前数组对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("每次调"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" 都会用函数内的条件检查当前元素会否符合要求 \n\n只有当前元素符合要求 才能继续遍历下一个元素。 只要碰一个不符合要求的元素"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("就立刻退出遍历 返回"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("。意思是不是所有元素都满足要求。\n如果遍历结束"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("还没有退出"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("说明整个数组中都符合要求 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("整个every")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("就返回"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\narr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("判断数组中是否包含符合要求的元素")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" bool "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("some")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("arr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" 判断条件\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("用法和every完全相同 只不过执行时 只要碰到一个元素判断为true  就不不再遍历,直接返回true。")]),s._v(" "),t("p",[s._v("只有遍历结束 还没有找到判断为true才返回false;")]),s._v(" "),t("p",[s._v("​")]),s._v(" "),t("h2",{attrs:{id:"遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[s._v("#")]),s._v(" 遍历")]),s._v(" "),t("h3",{attrs:{id:"普通遍历-代替for循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#普通遍历-代替for循环"}},[s._v("#")]),s._v(" 普通遍历: 代替for循环")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//i  当前位置 // arr[i] 当前元素值 ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对当前元素执行的操作！")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("forEach中自动遍历arr中的每个元素 每遍历一个元素 就在这个元素上自动调用一次回调函数"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" 自动传入当前元素值给value 当前位置给i 当前数组对象给arr。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"遍历并复制原数组为新数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遍历并复制原数组为新数组"}},[s._v("#")]),s._v(" 遍历并复制原数组为新数组")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 新数组"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("原数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// var newArr=[];//自动")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// for(var i=0; i<arr.length;i++){}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//      arr[i] i this")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//          ↓  ↓  ↓")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" 要放入的新数组中的元素值\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//return newArr;//自动")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h4",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[s._v("#")]),s._v(" 原理:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" map 内先自动创建一个新数组\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 然后才是带着回调函数一起遍历 原数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("自动将回调函数在每个元素上执行一次 将回调函数"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("的结果 放到新的数组中相同的位置上\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 遍历结束 返回新数组\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 仅单纯代替 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" 循环遍历数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("首选foreach\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 除非想保护原数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("返回的新数组时 采用map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"过滤和汇总"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过滤和汇总"}},[s._v("#")]),s._v(" 过滤和汇总：")]),s._v(" "),t("p",[s._v("过滤: 复制出原数组中符合条件的元素组成 新数组返回. 原数组保持不变！")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 新数组"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("原数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("filter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" 判断条件\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("原理:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("先创建一个空数组\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("自动遍历原数组中每个元素 每遍历一个元素 就自动调用一次回调函数 如果当前元素经过回调函数验证"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("返回"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" 则加入新数组中 如果当前元素经过回调函数验证 返回"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" 则不加入新数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" \n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 遍历结束"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("返回新数组！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("汇总： 对数组中的元素内同容进行统计 得出最终结论")])]),s._v(" "),t("p",[s._v("作业")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 如何用"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES5")]),s._v("实现两种类型的继承 ———— 手写\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 如何 判断一个对象是不是数组 共有几种方法！ "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("种以上\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h1",{attrs:{id:"es6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6"}},[s._v("#")]),s._v(" ES6")]),s._v(" "),t("h2",{attrs:{id:"什么是-ecmascript-第6个版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ecmascript-第6个版本"}},[s._v("#")]),s._v(" 什么是:ECMAScript 第6个版本")]),s._v(" "),t("p",[s._v("优点: 在不改变原理的基础上 简化了Js代码")]),s._v(" "),t("p",[s._v("问题: 兼容性")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  包括"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n          什么是"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("  专门代替"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 来声明变量用\n         \n          为什么"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 的问题"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 声明提前\n              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 没有块级作用域\n         \n          何时"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 只要声明变量都用 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v("\n         \n              优点：\n                  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("阻止了声明提前\n                  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 添加块级作用域\n         \n          原理"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" 其实就是一个匿名自调"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n                且"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" 为了双保险 其实底层悄悄给变量改了名字\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[s._v("​              let 小脾气\n​                  1 在相同作用域/块内，禁止同时let两个同名的变量\n​"),t("br"),s._v("\n​                  2 在let a之前到当前作用域顶不允许提前使用 a 变量")]),s._v(" "),t("h2",{attrs:{id:"箭头函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[s._v("#")]),s._v(" 箭头函数:")]),s._v(" "),t("p",[s._v("什么是  对普通函数声明的简写")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("何时： 今后绝大多数匿名函数的创建 都用箭头函数。\n\n如何 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("件事\n\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 去掉 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("在")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("和"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("之间")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 如果形参列表只有一个变量 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("可省略")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 如果函数体只有一句话 可省略"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    但是 如果仅有的这句话 还是"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" 则必须省略"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n    去掉"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("时 还要注意去掉语句结尾"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('";"')]),s._v("\n\n双刃剑\n\n让函数内外"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("连通 保持一致。都指向函数外"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("\n\n结论"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 如果希望函数内的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("和函数外的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" 不一致时！ 就不能用箭头函数！\n\n比如： 对象的方法不能用箭头函数简写\n\n比如： "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("中的事件处理函数也不能用箭头函数简写\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("问题  一旦改为箭头函数则不能使用arguments")]),s._v(" "),t("h2",{attrs:{id:"for-of"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[s._v("#")]),s._v(" For of")]),s._v(" "),t("p",[s._v("什么是 在特定情况下专门简化for循环")]),s._v(" "),t("p",[s._v("总结:  遍历一个数组：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("优点: 即可控制遍历的方向 有可遍历循环的步调")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("elem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//当前元素 elem")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("局限: 不能控制遍历的方向 也不能控制便利的步调")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v("\n如何"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" elem "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" 数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//of 会依次取出数组每个元素值，保存在of前的变量elem中")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("局限: 只能获得元素值 无法获得当前元素位置\n​"),t("br"),s._v("\n其实 for of 不但可以用于数组 还可以用于字符串,类数组对象,单个数值")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("总结"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" 可以遍历数字下标数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 类数组对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("字符串 中的每个字。\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" 专门遍历自定义下标的关联数组 和对象。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"参数增强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数增强"}},[s._v("#")]),s._v(" 参数增强")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    什么是"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES6")]),s._v("中对函数的参数 提供了更强大"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("更方便的功能\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("包括:")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("参数默认值(default);")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("函数名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("形参"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("形参n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("默认值")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    如果没有传入最后一个参数 则使用默认值作为备胎 \n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v(" ES5 的代替方式:形参 n=形参n||默认值\n")])])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code")]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"})])])]),s._v(" "),t("p",[s._v('如果形参n是有意义的值不是false"",undefined,null,NaN 就用 形参n 的值继续向后执行')]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v(" // 如果 形参n是没有意义的值 就用默认值作为备胎\n \n 强调: 局限 只能解决最后一个形参不确定的情况。\n ````\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("剩余参数(rest);")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v(" 什么是:专门代替arguments\n 为什么:arguments的问题\n")])])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 不是纯正的数组类型 用不了数组家的函数\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 不支持箭头函数\n何时"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 今后只要使用arguments的地方都可以使用rest语法代替\n\n如何"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    定义函数时：\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("形参"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("形参"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("数组名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...后的数组会接住除之前形参外的其他所有剩余实参值")]),s._v("\n        \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 数组是纯正的数组类型可随意使用数组家的函数")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//即使fun改为箭头函数 依然可以使用...数组名的rest语法 ")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("打散数组")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("spead"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])])])]),s._v(" "),t("h3",{attrs:{id:"为什么-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-8"}},[s._v("#")]),s._v(" 为什么:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    代替apply \n    apply的问题是 本职工作不是打散数组，而是替换"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" 顺便打散数组。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"何时-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-10"}},[s._v("#")]),s._v(" 何时:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    今后只要希望将一个数组整体 打散为单个值\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"如何-传递参数或赋值时"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-传递参数或赋值时"}},[s._v("#")]),s._v(" 如何： 传递参数或赋值时")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fun")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    先将arr中的元素值打散为单个值 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("再分别传给fun")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("项目中:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 拼接两个数组\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" arr1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("arr2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("arr1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("arr2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      arr"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 合并两个对象\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj1"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("obj2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v("  obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("obj1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("obj2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      obj"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h2",{attrs:{id:"解构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解构"}},[s._v("#")]),s._v(" 解构:")]),s._v(" "),t("h3",{attrs:{id:"什么是-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-11"}},[s._v("#")]),s._v(" 什么是:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  将一个大的对象或数组中的个别成员 提取出来"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("单独使用\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"何时-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-11"}},[s._v("#")]),s._v(" 何时:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  如果给的是一个巨大的对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("而我们这个功能，\n 只需要其中个别函数或者属性时 就要将所需的成员解构 出来 单独使用。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"如何-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-8"}},[s._v("#")]),s._v(" 如何：")]),s._v(" "),t("p",[s._v("数组解构：")]),s._v(" "),t("p",[s._v("什么是: 将大的数组中的个别元素提取出来单独使用。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("如何"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("下标对下标\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("变量"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("变量"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("数组\n "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" \n 结果"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 变量"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n变量"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 数组"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("对象解构")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v(" 什么是"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 将大的数组中的个别元素提取出来单独使用\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如何：  属性名对属性名")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("属性名"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("变量"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("属性名 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 变量"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("对象\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("结果"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 变量"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("属性名 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n变量"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 对象"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("属性名"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n简写 如果新变量的名字延用成员对象中的属性名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("则可以简写 \n\n比如"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("user 对象中 解构出登录方法和注册方法单独使用\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("signin"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("signin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("signup"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("signup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user\n可简写"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("signin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("signup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h2",{attrs:{id:"参数结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数结构"}},[s._v("#")]),s._v(" 参数结构")]),s._v(" "),t("h3",{attrs:{id:"什么是-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-12"}},[s._v("#")]),s._v(" 什么是")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    在定义函数和调用函数时采用对象结构传递参数。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"何时-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-12"}},[s._v("#")]),s._v(" 何时:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    多个形参值不确定有没有 而且有要求实参值与形参值之间必须对应。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"为什么-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-9"}},[s._v("#")]),s._v(" 为什么:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    默认值"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 局限"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("只有最后一个形参不确定时 才能使用默认值\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("rest 和 arguments；局限"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 无法让形参值与实参值一一对应。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("用对象结构传参:")]),s._v(" "),t("h3",{attrs:{id:"问题-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题-3"}},[s._v("#")]),s._v(" 问题:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    定义函数时只有一个对象形参 将来调用者不知道具体形参个数和名称！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如何：2步")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 定义函数时 形参写成对象语法！\n    \n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 调用函数时 所有实参必须放在一个形参对象结构相同的对象中传入\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"面向对象上的简化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象上的简化"}},[s._v("#")]),s._v(" 面向对象上的简化：")]),s._v(" "),t("h3",{attrs:{id:"对单个对象提供了2处简化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对单个对象提供了2处简化"}},[s._v("#")]),s._v(" 对单个对象提供了2处简化")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('  如果对象的属性提供了2处简化\n  \n        1. 如果对象的属性值来自于对象外的变量,且变量名刚好和属性名相同 则不用写两遍相同的名字 只要写一遍即可。\n  \n        2. 所有对象的方法,不再需要写":function"\n            强调:对象的方法去掉:function 不等效于箭头函数 突出的特点 this保持不变！\n            所以 去掉:function,只是单纯的简写 没有任何原理的改变！\n')])])]),t("p",[s._v("​")]),s._v(" "),t("h3",{attrs:{id:"class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[s._v("#")]),s._v(" Class:")]),s._v(" "),t("h4",{attrs:{id:"什么是-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-13"}},[s._v("#")]),s._v(" 什么是:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    集中定义一种类型的所有对象统一属性结构和方法的程序结构。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"为什么-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-10"}},[s._v("#")]),s._v(" 为什么")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    每一种类型 Array Student Date  都有两部分组成 构造函数"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("原型对象\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"构造函数-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数-2"}},[s._v("#")]),s._v(" 构造函数:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("      负责定义 子对象统一的属性结构"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("并且负责创建子对象\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h5",{attrs:{id:"原型对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型对象"}},[s._v("#")]),s._v(" 原型对象:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    负责保存所有子对象共有的属性值和方法\n    但是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("在"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES5")]),s._v("中 构造函数和原型对象是分开定义的。 不符合"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"封装"')]),s._v("的要求\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"何时-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-13"}},[s._v("#")]),s._v(" 何时:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    今后只要希望创建一种自定义类型时 都用"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"如何-3件事"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何-3件事"}},[s._v("#")]),s._v(" 如何: 3件事")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 用"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("包裹 构造函数和原型对象方法\n \n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 构造函数名提升为"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v("名 所有构造函数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("从此统一更名为constructor\n  \n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 所有放在"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v("中的函数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("不需要加类型名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype前缀"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("自动就保存在构造函数的原型对象中。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("如何使用 class: 用法和从前的构造函数完全一样！\n原型对象的原理依然保持不变。")]),s._v(" "),t("p",[s._v("两种类型间的继承:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("问题： 两种类型之间包含部分相同的属性结构和方法定义。\n解决： 定义一个上层的父类型"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("集中保存两种子类型相同部分。\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[s._v("#")]),s._v(" Promise:")]),s._v(" "),t("h3",{attrs:{id:"什么是-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-14"}},[s._v("#")]),s._v(" 什么是")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("  专门保证多个异步函数 可以顺序执行的机制 而且还防止了回调地狱的问题\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"何时-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时-14"}},[s._v("#")]),s._v(" 何时:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    多个异步调用的函数  要求必须顺序执行！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"为什么-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-11"}},[s._v("#")]),s._v(" 为什么：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    其实用回调函数，也可以实现多个异步函数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("顺序执行 但是 使用回调函数\n    会有回调地狱问题！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("问题1  多个异步函数要求顺序执行")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    错误的解决 仅按顺序调用\n          结果 无法保证顺序执行\n          因为 多个异步函数 相当于百米赛跑 每人之各占一条跑道 互相不会等待\n  \n    传统解决办法"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("使用回调函数\n              \n              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 在定义函数时 定义一个callback形参变量 \n                  在函数内部 最后一句话执行之后自动调用callback（）\n              \n              "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 在调用函数h时"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("传入一个函数 函数中包含\n              下一步要执行的操作 ———— 提前托付\n               效果   当前一个函数调用时 暂时不执行 传入的小函数\n               只有前一个函数最后一句话执行完 才自动调用传入的小函数\n               一次保证小函数一定会在异步函数调用完才执行  \n               问题 当连续执行的异步函数非常多时就会形成回调地狱！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("解决:ES6 Promise")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("    多个异步函数要求顺序执行\n    \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("能接受下一个"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("取决于前一个"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("中的函数是否也支持Promise。如果前一个"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("中的函数支持Promise 则"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("可以继续"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("。\n      \n    如果前一个"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("中的函数不支持Promise 则不能继续"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("前后两个函数间传参:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("步"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 上一步函数中 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("door")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("参数值"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  \n      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 下一个函数定义时就要定义一个形参准备接\n         原理 当上一个函数调用 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("door")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("参数值"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("时"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("参数默认值 会顺着"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("交给"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("中的下一个函数的形参变量。\n         在下一个中 就可通过自己的形参变量获得上一步传下来的参数值\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("局限：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("door")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("中只能传一个变量 如果必须穿多个值 则可以将多个值放在数组或对象中整体传入。  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("错误处理:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("如何"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 任何一个支持 Promise的函数中都有另一扇门 如果当前异步任务执行过程中发生错误就可以从另一扇门出来 一旦从报错这扇门出来后"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("后续"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("都不再执行\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("其实new Promise() 除了.then外 还有另一个方法.catch() 凡是从出错的门出来的代码都进入.catch()中执行错误处理操作")]),s._v(" "),t("p",[s._v("等待多个异步任务完成才执行:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("Promise"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("all")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("多个支持Promise的函数调用")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("后续操作"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("问题：如果每个异步任务都返回一个接力棒 则如何获得所有接力棒呢？\n\n解决："),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n其中 arr数组中保存了Promise"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("all "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("中所有异步函数通过door")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("返回执行结果\n强调"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" arr中返回值存储的顺序和异步函数执行完成的顺序无关 只和调用的顺序有关！\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("​")]),s._v(" "),t("h3",{attrs:{id:"一个promise有三个状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个promise有三个状态"}},[s._v("#")]),s._v(" 一个Promise有三个状态")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" pending"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("挂起 异步任务正在执行还没有执行完\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" resolve"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("同意 当异步任务执行完"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("且执行成功"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("主动调用 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("door")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("函数  会将Promise对象的状态 改为 resolve 当Promise对象状态改为resolve 就会自动执行"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("中的函数\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" reject"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 拒绝 当异步任务执行完 且执行失败 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("主动调用err")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("函数  会将Promise对象的状态 改为reject  当Promise对象的状态 一旦被改为reject后 会自动调用  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("catch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("中的函数\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("​")]),s._v(" "),t("h3",{attrs:{id:"promise的问题-并没有彻底消灭嵌套"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise的问题-并没有彻底消灭嵌套"}},[s._v("#")]),s._v(" Promise的问题 并没有彻底消灭嵌套")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("比如 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("weimin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"比赛结束"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("catch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("err")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    错误处理\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("解决:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ES7： async  awiat 可按照传统同步指定的\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("代码一样 编写异步代码顺序执行\n​"),t("br"),s._v("\n只要多个异步任务需要顺序执行:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    同步代码"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("异步函数")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    同步代码\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("其中 await 可让整段匿名函数自调暂时挂起 等待当前异步函数执行完 在执行后续代码！\n​  强调：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("es7 的 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" 仅仅简化的是Promise函数 调用的部分。而并没有简化 Promise 函数的定义 且 如果想用"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" 则异步函数\n必须定义为支持Promise的样式\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("错误处理 如果"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v("修饰的异步函数 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("中调用了err")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("方法 打开了错误的门 则"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" 会认为是程序错误  \n\n应该用 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("来解决\n强调"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 只有"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v("下的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" catch 才能捕获异步任务中的错误 没在"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v("下的Js基础中所学的trycatch是不能捕获异步任务的！因为普通Js基础中的"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" catch 属于主程序 不会等待异步任务执行 就已经结束了 即使异步任务出错 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" catch 因为早就结束了 所以根本捕获不到\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("​      为什么 await 配合 try catch 就可以捕获异步任务中的错误呢？")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("      因为 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" 可以留住当前程序中的一切代码 等待异步函数执行完。\n​      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" catch 就可能捕获到异步任务中的错误\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);